#!/usr/bin/env python3
"""
Quick test of the autonomous pentest feature
"""

import asyncio
import sys
from pathlib import Path

# Add current directory to path
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

async def test_pentest():
    """Test the autonomous pentest feature"""
    
    print("🎯 Testing Autonomous Penetration Testing")
    print("=" * 50)
    
    try:
        from intelligent_terminal_ai.main import IntelligentTerminalAI
        
        print("✅ Importing IntelligentTerminalAI...")
        
        # Initialize with Gemini
        async with IntelligentTerminalAI(
            ai_model="gemini-2.0-flash",
            headless_browser=True,
            log_level="INFO"
        ) as ai_tool:
            
            print("✅ AI Tool initialized with Gemini 2.0 Flash")
            
            # Test the vulnerable website
            target_url = "http://testphp.vulnweb.com/"
            print(f"\n🎯 Target: {target_url}")
            print("🔍 Starting autonomous penetration test...")
            print("⏳ This may take a few minutes...")
            
            # Run the pentest
            result = await ai_tool.autonomous_pentest(target_url, depth=2, max_tests=10)
            
            # Display results
            print("\n" + "="*70)
            print("🛡️  PENETRATION TEST RESULTS")
            print("="*70)
            
            print(f"🎯 Target: {result.get('target', 'Unknown')}")
            print(f"📊 Risk Score: {result.get('risk_score', 0)}/10")
            
            phases = result.get('phases', [])
            print(f"\n📋 Phases Completed: {len(phases)}")
            
            for i, phase in enumerate(phases, 1):
                print(f"\n{i}. {phase.get('name', 'Unknown Phase')}")
                tests = phase.get('tests', [])
                findings = phase.get('findings', [])
                print(f"   Tests: {len(tests)}, Findings: {len(findings)}")
                
                # Show some findings
                if findings:
                    print("   🚨 Key Findings:")
                    for finding in findings[:3]:
                        print(f"     • {finding.get('type', 'Unknown')}: {finding.get('url', 'N/A')}")
            
            # Show AI analysis
            summary = result.get('summary', '')
            if summary:
                print(f"\n🤖 AI Analysis Summary:")
                print(f"   {summary[:300]}...")
            
            # Show recommendations
            recommendations = result.get('recommendations', [])
            if recommendations:
                print(f"\n💡 Top Recommendations:")
                for i, rec in enumerate(recommendations[:3], 1):
                    print(f"   {i}. {rec}")
            
            # Show errors if any
            if 'error' in result:
                print(f"\n❌ Error: {result['error']}")
            
            print("\n" + "="*70)
            print("🎉 Autonomous penetration test completed!")
            
    except Exception as e:
        print(f"❌ Test failed: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_pentest())
